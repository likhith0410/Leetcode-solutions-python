# LeetCode Problem 138: Copy List with Random Pointer

# Difficulty: Medium

# ----------------------------
# ðŸ§  Problem Statement:

A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.
Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.
For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.
Return the head of the copied linked list.
The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:
val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.

Example:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

# âœ… Approach:
Pass 1 â€“ Interleaving:
-Create a copy of each node.
-Insert it right after the original node.

Pass 2 â€“ Assign .random pointers:
-For each original node:
-copy_node.random = original.random.next (because copy is just after original)

Pass 3 â€“ Separate the lists:
-Restore the original list.
-Extract the copied list.

"""
# Definition for a Node.
class Node:
    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if not head:
            return None

        # Step 1: Create new nodes and insert them just after original nodes
        current = head
        while current:
            new_node = Node(current.val)
            new_node.next = current.next 
            current.next = new_node      
            current = new_node.next       

        # Step 2: Assign random pointers for the copied nodes
        current = head
        while current:
            if current.random:
                current.next.random = current.random.next
            current = current.next.next  # move to next original node

        # Step 3: Separate original and copied list
        original = head
        copy = head.next
        new_head = copy

        while original:
            original_next = original.next.next
            copy_next = copy.next.next if copy.next else None
            original.next = original_next
            copy.next = copy_next
            original = original_next
            copy = copy.next

        return new_head

ðŸ“Š Time Complexity: O(n)
-We visit each node three times (in 3 loops), which is still linear.
-n is the number of nodes in the original list.

ðŸ§  Space Complexity: O(1)
-We use no extra space (unlike the HashMap-based approach).
-The only space used is for the new copied nodes, which doesn't count toward auxiliary space.
