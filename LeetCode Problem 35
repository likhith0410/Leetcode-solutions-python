LeetCode Problem 35: Search Insert Position

Difficulty: Easy

🧠 Problem Statement:
Given a sorted array of distinct integers and a target value:
If the target is found → return its index.
If not found → return the index where it would be inserted to keep order.
⚡ Requirement: Must run in O(log n) (binary search).

Example 1:

Input:nums = [1,3,5,6], target = 7

Output:4

Explanation:
7 is not in the list, but it should come after 6 → index 4.

✅ Approach:

We use Binary Search:

Initialize two pointers:
-left = 0
-right = len(nums) - 1
While left <= right:
-Find mid = (left + right) // 2.
-If nums[mid] == target → return mid.
-If nums[mid] < target → move left = mid + 1.
-Else → move right = mid - 1.
If loop ends (target not found):
-left will be at the correct insert position.

📝 Code:
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1

        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        
        # Target not found → insert position = left
        return left

🔁 Dry Run:

Input: nums = [1,3,5,6], target = 2
left = 0, right = 3
mid = 1 → nums[1] = 3
3 > 2 → move right = 0
Next:
left = 0, right = 0
mid = 0 → nums[0] = 1
1 < 2 → move left = 1

Loop ends. Insert position = left = 1.

✅ Output: 1

📊 Time Complexity:
-O(log n) → binary search halves range each step.

🧠 Space Complexity:
-O(1) → only variables used.
