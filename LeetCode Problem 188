LeetCode Problem 188: Best Time to Buy and Sell Stock IV

Difficulty: Hard

🧠 Problem Statement:

You are given:
prices[i]: stock price on day i.
k: maximum number of transactions allowed.
👉 A transaction = 1 buy + 1 sell.
👉 You must sell before buying again.

Return the maximum profit achievable with at most k transactions.

Example 1:
Input:k = 2, prices = [2,4,1]
Output:2

Explanation:
Buy on day 1 (price = 2), sell on day 2 (price = 4).
Profit = 4 - 2 = 2.

✅ Approach (Dynamic Programming with Optimization)

We extend the logic of Best Time to Buy & Sell Stock III (at most 2 transactions) to k transactions.

Key Observations:
If k >= n/2 → it’s the same as infinite transactions.
-Just add up all positive differences (prices[i] - prices[i-1]).
Otherwise, maintain two arrays:
-buy[j]: max profit after buying in the j-th transaction.
-sell[j]: max profit after selling in the j-th transaction.
Transition:
-buy[j] = max(buy[j], sell[j-1] - price)(buy at today’s price after completing j-1 sells).
-sell[j] = max(sell[j], buy[j] + price)(sell today after buying in j-th transaction).
Answer = sell[k].

📝 Code (Python)
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        if n == 0 or k == 0:
            return 0
        
        # Case 1: k is large -> same as infinite transactions
        if k >= n // 2:
            profit = 0
            for i in range(1, n):
                if prices[i] > prices[i-1]:
                    profit += prices[i] - prices[i-1]
            return profit
        
        # Case 2: Limited transactions
        buy = [-float('inf')] * (k+1)
        sell = [0] * (k+1)
        
        for price in prices:
            for j in range(1, k+1):
                buy[j] = max(buy[j], sell[j-1] - price)
                sell[j] = max(sell[j], buy[j] + price)
        
        return sell[k]

🔁 Dry Run

Input: k=2, prices=[2,4,1]
Day 1, price=2:
buy[1] = max(-inf, 0-2) = -2
Day 2, price=4:
sell[1] = max(0, -2+4) = 2
Day 3, price=1:
No better profit.

👉 Final Answer = sell[2] = 2. ✅

📊 Complexity
-Time Complexity: O(n * k) (iterate over prices × transactions).
-Space Complexity: O(k) (two 1D arrays: buy and sell).
