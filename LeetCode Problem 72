LeetCode Problem 72: Edit Distance

Difficulty: Medium

🧠 Problem Statement:

Given two strings word1 and word2, return the minimum number of operations required to convert word1 → word2.
You may use these operations:
Insert a character.
Delete a character.
Replace a character.

Example:
Input:word1 = "horse", word2 = "ros"
Output:3

Explanation:
horse → rorse (replace 'h' with 'r')
rorse → rose (delete 'r')
rose → ros (delete 'e')
Total operations = 3

✅ Approach (Dynamic Programming - Edit Distance / Levenshtein Distance)

We build a DP table dp[i][j] where:
👉 dp[i][j] = minimum operations to convert word1[:i] → word2[:j].

Steps:
Initialization
-Converting empty string → word2 → need j insertions.
-Converting word1 → empty string → need i deletions.

Transition
If characters match (word1[i-1] == word2[j-1]):
→ dp[i][j] = dp[i-1][j-1] (no operation needed).
Else:
dp[i][j] = 1 + min(
   dp[i-1][j-1], # Replace
   dp[i-1][j],   # Delete
   dp[i][j-1]    # Insert
)
Answer = dp[m][n] (where m=len(word1), n=len(word2)).

📝 Code (Python)
class Solution:
  def minDistance(self, word1: str, word2: str) -> int:
    m, n = len(word1), len(word2)
    
    # dp[i][j] = min operations to convert word1[0..i) → word2[0..j)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Base cases
    for i in range(1, m + 1):
      dp[i][0] = i  # delete all i chars
    for j in range(1, n + 1):
      dp[0][j] = j  # insert all j chars

    # Fill DP table
    for i in range(1, m + 1):
      for j in range(1, n + 1):
        if word1[i - 1] == word2[j - 1]:
          dp[i][j] = dp[i - 1][j - 1]
        else:
          dp[i][j] = 1 + min(dp[i - 1][j - 1],  # Replace
                             dp[i - 1][j],      # Delete
                             dp[i][j - 1])      # Insert
    return dp[m][n]

🔁 Dry Run (word1 = "horse", word2 = "ros")

dp[0][*] = [0,1,2,3] → need inserts
dp[*][0] = [0,1,2,3,4,5] → need deletes
Iterating fills table step by step:
Matching chars reduce cost.
Mismatches take min of insert, delete, replace.
Final dp[5][3] = 3. ✅

📊 Complexity
-Time Complexity: O(m * n) (fill DP table).
-Space Complexity: O(m * n) (2D table).
-Can optimize to O(min(m, n)) space using 1D rolling arrays.
