LeetCode Problem 236: Lowest Common Ancestor of a Binary Tree

Difficulty: Medium

üß† Problem Statement:
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes p and q.

üëâ Definition:
The Lowest Common Ancestor is the lowest node in the tree that has both p and q as descendants (a node can be a descendant of itself).

‚úÖ Example:

Input:root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output:3

Explanation: The LCA of nodes 5 and 1 is 3.

‚úÖ Approach:
We solve this using recursion:
Base Case:
-If the current root is None, return None.
-If the current root equals p or q, return the root (because one of the nodes is found).
Recursive Search:
-Recursively search in the left subtree.
-Recursively search in the right subtree.
Check Results:
-If both left and right return non-None, it means p and q are found in different subtrees ‚Üí current node is the LCA.
-Otherwise, return the non-None result (either from left or right).

üíª Code (Python):

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # Base Case: If root is None or matches p/q
        if not root or root == p or root == q:
            return root
        
        # Search in left and right subtrees
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        
        # If both left and right are non-null, root is LCA
        if left and right:
            return root
        
        # Otherwise, return whichever side is non-null
        return left if left else right


üîÅ Dry Run:
Input:
root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1

Tree structure:

        3
       / \
      5   1
     / \  / \
    6  2 0  8
      / \
     7   4


Start at root (3): not equal to p or q.
Recurse left ‚Üí find 5.
Recurse right ‚Üí find 1.
Since left and right are both non-null ‚Üí root 3 is the LCA.

‚úÖ Final Output: 3

üìä Time Complexity:
-O(n): We may need to visit every node in the tree once (where n = number of nodes).

üß† Space Complexity:

O(h): Recursion stack depth, where h = tree height.
-Worst case (skewed tree) ‚Üí O(n).
-Best case (balanced tree) ‚Üí O(log n).
