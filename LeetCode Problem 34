LeetCode Problem 34: Find First and Last Position of Element in Sorted Array

Difficulty: Medium

🧠 Problem Statement:
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
👉 If the target is not found in the array, return [-1, -1].
👉 You must write an algorithm with O(log n) runtime complexity.

Example:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

✅ Approach:
We use binary search twice:
-First search → Find the first occurrence of target.
-Second search → Find the last occurrence of target.

Steps:
-Initialize left = 0, right = len(nums) - 1.
-While searching:
--If nums[mid] == target, update the answer.
---For first occurrence → move right = mid - 1 to keep searching left.
---For last occurrence → move left = mid + 1 to keep searching right.
--Adjust search boundaries based on whether nums[mid] is smaller or larger than target.
-Return [first, last].

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def findFirst(nums, target):
            left, right = 0, len(nums) - 1
            first = -1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] == target:
                    first = mid
                    right = mid - 1   # keep searching left
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return first

        def findLast(nums, target):
            left, right = 0, len(nums) - 1
            last = -1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] == target:
                    last = mid
                    left = mid + 1   # keep searching right
                elif nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return last

        return [findFirst(nums, target), findLast(nums, target)]


🔁 Dry Run:
Input: nums = [5,7,7,8,8,10], target = 8
findFirst:
-Found 8 at index 3, keep searching left → first = 3.
-Found 8 at index 4, ignore since searching left.
→ Result: first = 3.

findLast:
-Found 8 at index 3, keep searching right.
-Found 8 at index 4, update → last = 4.
→ Result: last = 4.

✅ Final Output: [3,4]

📊 Time Complexity:
-O(log n) for each binary search → Total O(log n).

🧠 Space Complexity:
-O(1) → Only uses a few variables, no extra space.
