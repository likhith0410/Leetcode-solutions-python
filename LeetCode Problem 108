LeetCode Problem 108: Convert Sorted Array to Binary Search Tree

Difficulty: Easy

🧠 Problem Statement:
Given a sorted integer array nums (ascending order), convert it into a height-balanced BST.
👉 Rules:
Height-balanced = For every node, left & right subtrees differ in height by at most 1.
Middle element of array should be root → ensures balance.

Example:
Input:nums = [-10,-3,0,5,9]
Output:[0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also a valid answer.

✅ Approach: Divide & Conquer (Recursion)
If the array is empty → return None.
Find the middle element: mid = len(nums) // 2.
-Middle element becomes the root.
Recursively build:
-Left subtree → left half of array (nums[:mid]).
-Right subtree → right half of array (nums[mid+1:]).
Return root node.

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        # Base case: empty array → no node
        if not nums:
            return None
        
        # Choose middle as root
        mid = len(nums) // 2
        root = TreeNode(nums[mid])
        
        # Recursively build left & right subtrees
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid+1:])
        
        return root

🔁 Dry Run:
Input: nums = [-10,-3,0,5,9]
mid = 2 → root = 0.
Left half = [-10,-3] → mid = 1 → node = -3, left child = -10.
Right half = [5,9] → mid = 1 → node = 9, left child = 5.

Tree formed:

        0
       / \
     -3   9
     /   /
   -10  5


Final Output: [0,-3,9,-10,null,5] ✅

📊 Time Complexity:
-Each element visited once → O(n)

🧠 Space Complexity:
-Recursion depth = height of tree.
-Balanced tree height = O(log n)
-Worst case skewed (but here always balanced) → O(n)
