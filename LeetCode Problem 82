âœ… 82. Remove Duplicates from Sorted List II
Difficulty: Medium
Category: Linked List

ðŸ§  Problem Statement
Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
Return the linked list sorted as well.

Example:
Input: 1 -> 2 -> 3 -> 3 -> 4 -> 4 -> 5
Output: 1 -> 2 -> 5

ðŸ’¡ Approach Explanation
We use a dummy node pointing to the head of the list to easily handle edge cases like removing the first few nodes.
We then use two pointers:
-prev: tracks the last node before a duplicate group
-head: to iterate through the list

Steps:

-If head and head.next are duplicates, we move head forward to skip all nodes with that value.
-Then we set prev.next = head.next to remove the entire group.
-If no duplicate is found, move prev forward.
-Move head forward in each iteration.
At the end, return dummy.next to skip the dummy node.

class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0, head)  # Dummy node before the head
        prev = dummy               # Pointer to track the last confirmed unique node

        while head:
            if head.next and head.val == head.next.val:
                # Skip all nodes with same value
                while head.next and head.val == head.next.val:
                    head = head.next
                # Skip the last duplicate
                prev.next = head.next
            else:
                prev = prev.next  # Move prev forward only when no deletion

            head = head.next  # Move head forward

        return dummy.next

ðŸ“ˆ Time and Space Complexity
-Time Complexity: O(n) â€“ We traverse each node once.
-Space Complexity: O(1) â€“ No extra space except dummy node.
