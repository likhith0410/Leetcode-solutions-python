LeetCode Problem 74: Search a 2D Matrix

Difficulty: Medium

🧠 Problem Statement:
You are given an m x n integer matrix with:
Each row sorted in non-decreasing order.
The first element of each row is greater than the last element of the previous row.
👉 This makes the matrix behave like a flattened sorted array.

Task: Return True if target exists in the matrix, otherwise False.
Must solve in O(log(m * n)) time.

Example 1:
Input:matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3

Output:True

Explanation:
3 is present in the first row.

✅ Approach:

We treat the 2D matrix as a 1D sorted array of length m * n:
-Imagine flattening matrix into: [1,3,5,7,10,11,16,20,23,30,34,60].
-Perform binary search across this flattened index space.
-Convert back to (row, col) for accessing the real matrix.

Steps:
Get dimensions: m = rows, n = cols.
Use binary search on 0 … (m*n - 1).
At index mid:
-Convert: row = mid // n, col = mid % n.
-Compare matrix[row][col] with target.
If match → return True.
Else adjust left or right like normal binary search.
If loop ends → target not found → return False.

📝 Code:
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix or not matrix[0]:
            return False

        m, n = len(matrix), len(matrix[0])
        left, right = 0, m * n - 1

        while left <= right:
            mid = (left + right) // 2
            row, col = mid // n, mid % n
            val = matrix[row][col]

            if val == target:
                return True
            elif val < target:
                left = mid + 1
            else:
                right = mid - 1

        return False

🔁 Dry Run:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 16
m=3, n=4 → total=12.
left=0, right=11.
Step 1:
mid = 5 → row=1, col=1 → val=11.
11 < 16 → left=6.
Step 2:
mid = 8 → row=2, col=0 → val=23.
23 > 16 → right=7.
Step 3:
mid = 6 → row=1, col=2 → val=16.

Match found ✅.
Output: True

📊 Time Complexity:
-O(log(m * n)) → binary search across entire flattened array.

🧠 Space Complexity:
-O(1) → no extra space, just indices.
