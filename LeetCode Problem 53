LeetCode Problem 53: Maximum Subarray

Difficulty: Medium

🧠 Problem Statement:
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum, and return its sum.

Example:
Input:nums = [-2,1,-3,4,-1,2,1,-5,4]

Output:6

Explanation:
The subarray [4,-1,2,1] has the largest sum 6.

✅ Approach: Kadane’s Algorithm
We want the maximum possible sum of a contiguous subarray.
-Keep two variables:
--currentSum: the sum of the current subarray.
--maxSum: the best sum we’ve seen so far.
-Iterate through nums:
--Add current number to currentSum.
--Update maxSum if currentSum is greater.
--If currentSum drops below 0, reset it to 0 (because starting fresh is better than carrying a negative sum).

📝 Code:
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = float('-inf')  # Initialize to very small number
        currentSum = 0          # Running sum of subarray
        
        for num in nums:
            currentSum += num   # Add current number
            
            if currentSum > maxSum:
                maxSum = currentSum  # Update max if better found
            
            if currentSum < 0:
                currentSum = 0  # Reset when sum becomes negative
        
        return maxSum

🔁 Dry Run:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Start: maxSum = -inf, currentSum = 0
-2: currentSum = -2 → reset to 0, maxSum = -2
1: currentSum = 1 → maxSum = 1
-3: currentSum = -2 → reset to 0, maxSum = 1
4: currentSum = 4 → maxSum = 4
-1: currentSum = 3 → maxSum = 4
2: currentSum = 5 → maxSum = 5
1: currentSum = 6 → maxSum = 6
-5: currentSum = 1 → maxSum = 6
4: currentSum = 5 → maxSum = 6
✅ Final Output = 6

📊 Time Complexity:
-O(n) → Traverse the array once.

🧠 Space Complexity:
-O(1) → Only a few variables used (no extra arrays).
