LeetCode Problem 98: Validate Binary Search Tree

Difficulty: Medium

🧠 Problem Statement:
Given the root of a binary tree, determine if it is a valid Binary Search Tree (BST).
A valid BST is defined as follows:
-The left subtree of a node contains only nodes with keys strictly less than the node’s key.
-The right subtree of a node contains only nodes with keys strictly greater than the node’s key.
-Both the left and right subtrees must also be BSTs.

✅ Example:

Input: root = [5,3,7,2,4,null,8]
Output: true

✅ Approach:
We can solve this using DFS with value range validation:

Observation:
Each node must satisfy the BST property:
low < node.val < high.
Initially, the range is (-∞, +∞).
As we go down:
-Left child must be strictly less than the parent.
-Right child must be strictly greater than the parent.
Steps:
-Define a recursive DFS function dfs(node, low, high).
-If node is None, return True (valid).
-If node.val is not between (low, high), return False.
Recursively validate:
-Left subtree with range (low, node.val)
-Right subtree with range (node.val, high)
-Return True only if both subtrees are valid.

💻 Code (Python):
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def dfs(node, low, high):
            if not node:
                return True
            # Rule: node value must lie strictly between low and high
            if not (low < node.val < high):
                return False
            # Left subtree must be < node.val
            # Right subtree must be > node.val
            return dfs(node.left, low, node.val) and dfs(node.right, node.val, high)
        
        # Start with infinite range
        return dfs(root, float("-inf"), float("inf"))

🔁 Dry Run:

Input: root = [5,3,7,2,4,null,8]

Tree:

       5
      / \
     3   7
    / \    \
   2   4    8


Start with range (-∞, ∞), root=5 ✅
Left subtree → range (-∞, 5), node=3 ✅
Left of 3 → range (-∞, 3), node=2 ✅
Right of 3 → range (3, 5), node=4 ✅
Right subtree → range (5, ∞), node=7 ✅
Right of 7 → range (7, ∞), node=8 ✅
All nodes satisfy BST rules → Valid BST
Final Output: true

📊 Time Complexity:
O(n): Each node is visited once.

🧠 Space Complexity:
O(h): Recursion stack, where h = tree height.
