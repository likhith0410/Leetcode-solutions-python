LeetCode Problem 201: Bitwise AND of Numbers Range

Difficulty: Medium

🧠 Problem Statement:
You are given two integers left and right that define a range [left, right].
Return the bitwise AND of all integers between left and right (inclusive).

Example 1
Input:left = 5, right = 7

Range: 5 & 6 & 7

5 = 101
6 = 110
7 = 111
------------
AND = 100 = 4

Output:4


✅ Approach (Bit Manipulation Trick):

Observation:
-If left < right, the result loses the lowest set bit of right (because within the range, at least one number will make that bit 0).
-We keep clearing the lowest set bit of right until left == right.
-At that point, the common prefix of left and right is the result.

Code 1:
class Solution:
    def rangeBitwiseAnd(self, left: int, right: int) -> int:
        while left < right:
            right = right & (right - 1)   # clear lowest set bit of right
        return right

Code 2:
class Solution:
    def rangeBitwiseAnd(self, left: int, right: int) -> int:
        shift = 0
        while left < right:
            left >>= 1
            right >>= 1
            shift += 1
        return left << shift


🔁 Dry Run:
Input: left = 5, right = 7
Step 1: right = 7 → 7 & 6 = 6
left = 5, right = 6

Step 2: right = 6 → 6 & 5 = 4
left = 5, right = 4

Now left (5) > right (4), but since the loop condition is while left < right, we stop when they meet (after clearing).
Answer = 4.

📊 Time Complexity:
-O(1) for most cases,
-At worst O(log n), because each step removes one set bit from right.

🧠 Space Complexity:
-O(1).

⚡ Key Insight:
Bitwise AND over a range wipes out changing bits (bits that flip between 0 and 1 in the range).
Only the common prefix bits remain set
