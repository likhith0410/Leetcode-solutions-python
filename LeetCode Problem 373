LeetCode Problem 373: Find K Pairs with Smallest Sums

Difficulty: Medium

🧠 Problem Statement:
You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.
Define a pair (u, v) which consists of one element from the first array and one element from the second array.
Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

Example 1:
Input:nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output:[[1,2],[1,4],[1,6]]

Explanation:
The first 3 pairs are returned from the sequence:
[1,2], [1,4], [1,6], [7,2], [7,4], [11,2], [7,6], [11,4], [11,6].

✅ Approach:
We use a min-heap to always pick the smallest pair sum.
-Step 1: Push (nums1[i] + nums2[0], i, 0) for the first few elements of nums1 into the heap.
-Step 2: Repeatedly pop the smallest sum from the heap.
-Step 3: Each time we pop (nums1[i], nums2[j]), we push the next pair (nums1[i], nums2[j+1]).
-Stop once we collect k pairs.

class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        if not nums1 or not nums2:
            return []
        
        res = []
        min_heap = []
        
        # Step 1: Push first element of nums2 with first k elements of nums1
        for i in range(min(k, len(nums1))):
            heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))
        
        # Step 2: Extract k smallest pairs
        while k > 0 and min_heap:
            s, i, j = heapq.heappop(min_heap)
            res.append([nums1[i], nums2[j]])
            
            # Step 3: Push next element from nums2 with same nums1[i]
            if j + 1 < len(nums2):
                heapq.heappush(min_heap, (nums1[i] + nums2[j+1], i, j+1))
            
            k -= 1
        
        return res


🔁 Dry Run:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Start heap: (1+2=3,0,0), (7+2=9,1,0), (11+2=13,2,0)
Pop (3,0,0) → add [1,2], push (1+4=5,0,1)
Pop (5,0,1) → add [1,4], push (1+6=7,0,2)

Pop (7,0,2) → add [1,6]
✅ Output = [[1,2], [1,4], [1,6]]

📊 Time Complexity:
-Each pop/push operation takes O(log k).
-At most k pairs are processed.
-👉 Overall: O(k log k)

🧠 Space Complexity:
-Heap stores at most k elements.
-👉 O(k)
