LeetCode Problem 25: Reverse Nodes in k-Group
Difficulty: Hard

🧠 Problem Statement:
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list.
If the number of nodes is not a multiple of k, the remaining nodes should remain in the same order.

🔁 You may not alter the values in the list's nodes, only nodes themselves may be changed.

✅ Example:
Input:
head = [1,2,3,4,5], k = 3
Output:
[3,2,1,4,5]

✅ Approach:

-Use a dummy node to simplify edge case handling.
-Loop through the list in chunks of size k.
-For each k-sized group:
-Check if there are enough nodes left.
-Reverse the nodes in that group.
-Reconnect with the previous and next sections of the list.

code(python):
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        def get_kth_node(curr, k):
            while curr and k > 0:
                curr = curr.next
                k -= 1
            return curr

        dummy = ListNode(0)
        dummy.next = head
        group_prev = dummy

        while True:
            kth = get_kth_node(group_prev, k)
            if not kth:
                break
            group_next = kth.next

            # Reverse group
            prev, curr = kth.next, group_prev.next
            while curr != group_next:
                temp = curr.next
                curr.next = prev
                prev = curr
                curr = temp

            # Connect reversed group
            temp = group_prev.next
            group_prev.next = kth
            group_prev = temp

        return dummy.next
🔁 Dry Run:
For head = [1,2,3,4,5], k = 3
Initial linked list: 1 → 2 → 3 → 4 → 5
After reversing first group of 3: 3 → 2 → 1 → 4 → 5
