LeetCode Problem 70: Climbing Stairs

Difficulty: Easy

🧠 Problem Statement:
You are climbing a staircase. It takes n steps to reach the top.
Each time, you can climb 1 step or 2 steps.
Return the number of distinct ways you can climb to the top.
👉 Key Insights:
At each step, you can either come from:
1 step before (n-1)
2 steps before (n-2)
So, the total ways to reach step n =
ways(n-1) + ways(n-2) → This is exactly like Fibonacci numbers.

✅ Approach:
Base Cases:
-If n = 1 → only 1 way.
-If n = 2 → 2 ways (1+1, 2).
Use two variables (first, second) to track ways(n-1) and ways(n-2).
Iterate from 3 to n, updating like Fibonacci.
Return the result.

📝 Code:
class Solution:
    def climbStairs(self, n: int) -> int:
        if n <= 2:
            return n  # base cases: 1 step -> 1 way, 2 steps -> 2 ways

        first, second = 1, 2  # ways(1), ways(2)

        for _ in range(3, n + 1):
            first, second = second, first + second  # shift like Fibonacci

        return second


🔁 Dry Run:
Input: n = 4
Step 1 → 1 way (1)
Step 2 → 2 ways (1+1, 2)
Step 3 → ways(2) + ways(1) = 2 + 1 = 3
Step 4 → ways(3) + ways(2) = 3 + 2 = 5

✅ Final Output: 5

📊 Time Complexity:
-O(n): Loop runs once for each step.

🧠 Space Complexity:
-O(1): Only uses two variables (no extra arrays).
