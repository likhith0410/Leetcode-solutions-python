LeetCode Problem 637: Average of Levels in Binary Tree

Difficulty: Easy

🧠 Problem Statement:
Given the root of a binary tree, return the average value of the nodes on each level in the form of an array.
Answers within 10^-5 of the actual answer will be accepted.

✅ Example:
Input:root = [3,9,20,null,null,15,7]
Output:[3.00000, 14.50000, 11.00000]

Explanation:
Level 0: [3] → avg = 3.0
Level 1: [9,20] → avg = 14.5
Level 2: [15,7] → avg = 11.0
Hence return [3, 14.5, 11].

✅ Approach:
We solve this using BFS (Level-Order Traversal):
-Use a queue (deque) to traverse nodes level by level.
For each level:
-Compute the sum of node values.
-Divide by the number of nodes at that level to get the average.
Append the average to the result list.
Continue until all levels are processed.

💻 Code (Python):

from collections import deque

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:
        if not root:
            return []

        result = []
        queue = deque([root])   # Start BFS with root

        while queue:
            level_size = len(queue)  # number of nodes in this level
            level_sum = 0

            for _ in range(level_size):
                node = queue.popleft()
                level_sum += node.val

                # Add children to the queue for next level
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)

            # Compute average for this level
            result.append(level_sum / level_size)

        return result


🔁 Dry Run:

Input:root = [3,9,20,null,null,15,7]

Tree:

        3
       / \
      9   20
         /  \
        15   7


Steps:
Level 0: [3] → avg = 3 → result = [3.0]
Level 1: [9,20] → avg = (9+20)/2 = 14.5 → result = [3.0, 14.5]
Level 2: [15,7] → avg = (15+7)/2 = 11.0 → result = [3.0, 14.5, 11.0]

✅ Final Output: [3.0, 14.5, 11.0]

📊 Time Complexity:
-O(n): Each node is visited once (n = number of nodes).

🧠 Space Complexity:
-O(w): Queue stores nodes level by level, where w = maximum width of the tree.
-Worst case (complete tree) → O(n)
